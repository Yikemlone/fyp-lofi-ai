import pickle
import numpy
from music21 import instrument, note, stream, chord
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import BatchNormalization as BatchNorm
from keras.layers import Activation
from keras.layers import Bidirectional

class ChordGenerator:

    def __init__(self):
        self.chords = []
        self.chord_names = []
        self.number_of_chords = 0
        self.network_input = []
        self.normalized_input = []
        self.model = None
        self.NOTE_TYPE = {
            "eighth": 0.5,
            "quarter": 1,
            "half": 2,
            "16th": 0.25
        }

    def load_notes(self):
        with open('lofi_ai/data/chords.bin', 'rb') as filepath:
            self.chords = pickle.load(filepath)
        self.chord_names = sorted(set(item for item in self.chords))
        self.number_of_chords = len(set(self.chords))

    def prepare_sequences(self):
        """ Prepare the sequences used by the Neural Network """
        sequence_length = 100

        # Create a dictionary to match chords to ints   
        chord_to_int = dict((note, number) for number, note in enumerate(self.chord_names))

        for i in range(0, len(self.chords) - sequence_length, 1):
            sequence_in = self.chords[i:i + sequence_length]
            self.network_input.append([chord_to_int[char] for char in sequence_in])

        n_patterns = len(self.network_input)
        # Reshape the input into a format compatible with LSTM layers
        self.normalized_input = numpy.reshape(self.network_input, (n_patterns, sequence_length, 1))
        # Normalizes the input to be between 0 and 1
        self.normalized_input = self.normalized_input / float(self.number_of_chords)

    def create_network(self):
        """ create the structure of the neural network """
        self.model = Sequential()
        self.model.add(Bidirectional(LSTM(
            512,
            input_shape=(self.normalized_input.shape[1], self.normalized_input.shape[2]),
            recurrent_dropout=0.3,
            return_sequences=True
        )))
        self.model.add(Bidirectional(LSTM(512, return_sequences=True, recurrent_dropout=0.3)))
        self.model.add(Bidirectional(LSTM(512)))
        self.model.add(BatchNorm())
        self.model.add(Dropout(0.3))
        self.model.add(Dense(256))
        self.model.add(Activation('relu'))
        self.model.add(BatchNorm())
        self.model.add(Dropout(0.3))
        self.model.add(Dense(self.number_of_chords))
        self.model.add(Activation('softmax'))
        self.model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

        self.model.predict(numpy.random.random((1, self.normalized_input.shape[1], self.normalized_input.shape[2])))
        self.model.load_weights('lofi_ai/weights/weights-improvement-396-0.0022-bigger.hdf5')

    def generate_chords(self, user_requested_qty):
        """ Generate notes from the neural network based on a sequence of notes """
        # Pick a random sequence from the input as a starting point for the prediction
        start = numpy.random.randint(0, len(self.network_input)-1)

        int_to_note = dict((number, note) for number, note in enumerate(self.chord_names))
        pattern = self.network_input[start]

        prediction_output = []

        for _ in range(user_requested_qty):
            prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
            prediction_input = prediction_input / float(self.number_of_chords)
            prediction = self.model.predict(prediction_input, verbose=0)
            index = numpy.argmax(prediction)
            result = int_to_note[index]
            prediction_output.append(result)
            pattern.append(index)
            pattern = pattern[1:len(pattern)]
        
        chords = []

        for pattern in prediction_output:
            chord_data = {}
            chord_string = [int(note) for note in pattern.split('.')]
            parsed_chord = chord.Chord(chord_string)

            chord_data['chord'] = parsed_chord.pitchedCommonName
            chord_data['notes'] = ' '.join(n.nameWithOctave for n in parsed_chord.notes)
            chord_data['root'] = parsed_chord.root().nameWithOctave
            chord_data['quality'] = parsed_chord.quality

            chords.append(chord_data)

        return chords
    
    def create_midi(self, prediction_output):
        """ convert the output from the prediction to notes and create a midi file
            from the notes """
        offset = 0
        output_notes = []
        
        # create note and chord objects based on the values generated by the model
        for pattern in prediction_output:
            curr_type = numpy.random.choice(list(self.NOTE_TYPE.keys()), p=[0.65,0.05,0.05, 0.25])
            
            # pattern is a chord
            if ('.' in pattern) or pattern.isdigit():
                notes_in_chord = pattern.split('.')
                notes = []
                for current_note in notes_in_chord:
                    new_note = note.Note(int(current_note))
                    new_note.storedInstrument = instrument.Guitar()
                    notes.append(new_note)
                new_chord = chord.Chord(notes, type=curr_type)
                new_chord.offset = offset
                output_notes.append(new_chord)

            offset += self.NOTE_TYPE[curr_type]

        midi_stream = stream.Stream(output_notes)

        midi_stream.write('midi', fp='test_output.mid')

    def set_up(self):
        self.load_notes()
        self.prepare_sequences()
        self.create_network()

if __name__ == '__main__':
    chord_generator = ChordGenerator()
    chord_generator.set_up()
    chord_generator.generate_chords(4)